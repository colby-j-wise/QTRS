#!/usr/bin/python3
# -*- coding: utf-8 -*-

from abc import ABCMeta, abstractmethod
from eventhandler import FillEvent, OrderEvent

import queue


class ExecutionHandler(object):
	"""
	The ExecutionHandler abstract class handles the interaction
	between a set of order objects generated by a Portfolio and
	the ultimate set of Fill objects that actually occur in the
	market.

	The handlers can be used to subclass simulated brokerages
	or live brokerages, with identical interfaces. This allows
	strategies to be backtested in a very similar manner to the
	live trading engine.
	"""

	__metaclass__ = ABCMeta

	@abstractmethod
	def execute_order(self, event):
		"""
		Takes an Order event and executes it, producing
		a Fill event that gets placed onto the Events queue.

		Parameters:
		event - Contiains an Event object with order information.
		"""
		raise NotImplementedError("Must implement execute_order()")


class SimulatedExecutionHandler(ExecutionHandler):
	"""
	The simulated execution handler simply converts all order
	objects into their equivalent fill objects automatically
	without latency, slippage or fill-ratio issues.

	This allows a straightforward "first go" test of any strategy,
	before implementation with a more sophisticated execution
	handler.
	"""
	def __init__(self, events_queue):
		"""
		Initialises the handler, setting the event queues
		up internally.

		Parameters:
			events_queue - The Queue of Event objects.
		"""
		self.events_queue = events_queue

	def execute_order(self, event):
		"""
		Simply converts Order objects into Fill objects naively,
		i.e. without any latency, slippage or fill ratio problems.

		## TO DO: implement basic slippage rules and/or fill ratio 
		problems i.e. limits not filled (if limits)

		Parameters:
			event - Contains an Event object with order information
		"""
		if event.type is 'ORDER':
			fill_event = FillEvent(
									datetime.datetime.utcnow(),
									event.symbol,
									'ARCA', #random exchange assumption
									event.quantity,
									event.direction,
									None)
			self.events_queue.put(fill_event)
	